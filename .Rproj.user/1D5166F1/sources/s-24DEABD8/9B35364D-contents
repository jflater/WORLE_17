# Setup
#####
#setwd("/Users/jaredflater/Documents/Incubation/Data")

library(ggplot2)
library(vegan)
library(dplyr)
library(scales)
library(grid)
library(reshape2)
library(phyloseq)


sharedfile = "../../../Documents/Incubation/Data/mothur_output/stability.opti_mcc.shared"
taxfile = "../../../Documents/Incubation/Data/mothur_output/stability.cons.taxonomy"
mapfile = "../../../Documents/Incubation/Data/incubation_meta_350_smpls.txt"
#treefile = "mothur_output/tree.nwk"
#linker = "mothur_output/stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.rdp.wang.pick.taxonomy"
#### https://github.com/joey711/phyloseq/issues/806
#### tree file causing problems? see above

# Files from mothur from run done during August 2018
# taxfile = "stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.unique_list.0.03.cons.taxonomy"
# sharedfile = "stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.pick.opti_mcc.unique_list.shared"
# mapfile = "incubation_meta_350_smpls.txt"
# linker = "stability.trim.contigs.good.unique.good.filter.unique.precluster.pick.rdp.wang.pick.taxonomy"


mothur_data <- import_mothur(mothur_shared_file = sharedfile,
                             mothur_constaxonomy_file = taxfile) 

# tree <-  import_mothur(mothur_tree_file = treefile)
# tax <- import_mothur(mothur_constaxonomy_file = taxfile)
# shared <- import_mothur(mothur_shared_file = sharedfile)
# link <- read.delim(linker, header = FALSE, sep = "")

map <- read.delim(mapfile, fileEncoding= "UTF-16LE")
map <- sample_data(map, errorIfNULL = FALSE)

# had to re-run dist.seqs, on that output run get.oturep, then check with Jin
rownames(map) <- map$i_id

#Merge meta with mothur *be sure to compare samples between pre and post merge
moth_merge <- merge_phyloseq(mothur_data, map)

# Check and tidy phloseq object
#####
moth_merge

# Check taxonomy file column names
colnames(tax_table(moth_merge))

# Rename them
# During the mothur pipeline you can select which level to classify to
colnames(tax_table(moth_merge)) <- c("Kingdom", "Phylum", "Class",
                                     "Order", "Family", "Genus")

# Check for unwanted taxa
inc <- moth_merge %>%
  subset_taxa(Kingdom == "Bacteria" &
                Family  != "mitochondria" &
                Class   != "Chloroplast")
# Number of taxa same as before?
inc

# Save phyloseq object
saveRDS(inc,"Data/raw_incubation_old.RDS")

# # Make a data frame with a column for the read counts of each sample
# sample_sum_df <- data.frame(sum = sample_sums(inc))      
# 
# # Histogram of sample read counts
# ggplot(sample_sum_df, aes(x = sum)) + 
#   geom_histogram(color = "black", fill = "indianred", binwidth = 2500) +
#   ggtitle("Distribution of sample sequencing depth") + 
#   xlab("Read counts") +
#   theme(axis.title.y = element_blank())
# 
# # Grab only samples from incubation
# inc_treatment <- subset_samples(inc,
#                                 treatment %in% c("Alfalfa",
#                                                  "CompAlfa",
#                                                  "Compost",
#                                                  "Control"))
# inc_amend <- subset_samples(inc, 
#                             treatment %in% c("AlfalfaAmend",
#                                              "AlfalfaSoil",
#                                              "CompostAmend"))
#                                                   
#                                             
# ##########
# # Prune and agglomerate at phylum level
# #####
# 
# relative_abundance_df <- function(physeq) {
#   physeq%>%
#     tax_glom(taxrank = "Phylum") %>%              # agglomerate at phylum level
#     transform_sample_counts(function(x) {
#       x / sum(x)
#     }) %>%                                        # Transform to rel. abundance
#     psmelt() %>%                                  # Melt to long format
#     filter(Abundance > 0.02) %>%                  # Filter out low abundance taxa
#     arrange(Phylum)
# }
# inc_treatment_df <- relative_abundance_df(inc_treatment)
# inc_amend_df <- relative_abundance_df(inc_amend)
# 
# ##########
# # Make a list of colors for phyla, I used most common subway line colors
# #####
# phylum_colors <- c(
#   '#e6194b',
#   '#3cb44b',
#   '#ffe119',
#   '#0082c8',
#   '#f58231',
#   '#911eb4',
#   '#46f0f0',
#   '#f032e6',
#   '#d2f53c',
#   '#fabebe',
#   '#008080',
#   '#e6beff',
#   '#aa6e28',
#   '#fffac8'
# )
# 
# # Relative Abundance
# 
# # If we were to plot now, our abundances would be off. This is because in each 
# # catagory of treatment there are 12 samples, let's group them together for 
# #p lotting abundance
# 
# variable1 = as.character(get_variable(inc_treatment, "treatment"))
# variable2 = as.character(get_variable(inc_treatment, "day"))
# sample_data(inc_treatment)$TreatmentAndDay <- mapply(paste0, variable1, variable2,
#                                                      collapse = "-")
# inc_merged <- merge_samples(inc_treatment, "TreatmentAndDay")
# # Repair the merged values associated with each treatment after merging
# sample_data(inc_merged)$treatment <- levels(sample_data(inc_treatment)$treatment)
# 
# # prune out phyla below 2% in each sample
# inc_merged_phylum_df <- relative_abundance_df(inc_merged)
#   # tax_glom(taxrank = "Phylum") %>%                     # agglomerate at phylum level
#   # transform_sample_counts(function(x) {
#   #   x / sum(x)
#   # }) %>%                                               # Transform to rel. abundance
#   # psmelt() %>%                                         # Melt to long format
#   # filter(Abundance > 0.02) %>%                         # Filter out low abundance taxa
#   # arrange(Phylum)                                      # Sort data frame alphabetically by phylum
# 
# # Plot 
# a <- ggplot(inc_treatment_df, aes(x = as.factor(day), y = Abundance, fill = Phylum)) +
#   facet_grid(treatment ~ .) +
#   geom_bar(stat = "identity") +
#   scale_fill_manual(values = phylum_colors) +
#   # Remove x axis title
#   theme(axis.title.x = element_blank()) +
#   #
#   guides(fill = guide_legend(
#     reverse = TRUE,
#     keywidth = 1,
#     keyheight = 1
#   )) +
#   ylab("Relative Abundance (Phyla > 2%) \n") +
#   ggtitle("Phylum Composition of Incubation Soils \n Bacterial Communities by Treatment")
# #
# #Plot
# b <- ggplot(inc_merged_phylum_df, aes(x = as.factor(day), y = Abundance, fill = Phylum)) +
#   facet_grid(treatment ~ .) +
#   geom_bar(stat = "identity") +
#   scale_fill_manual(values = phylum_colors) +
#   # Remove x axis title
#   theme(axis.title.x = element_blank()) +
#   #
#   guides(fill = guide_legend(
#     reverse = TRUE,
#     keywidth = 1,
#     keyheight = 1
#   )) +
#   ylab("Relative Abundance (Phyla > 2%) \n") +
#   ggtitle("Phylum Composition of Incubation Soils \n Bacterial Communities by Treatment")
# 
# # Save the two plots
# #
# pdf("relato12.pdf",
#     width = 7, height = 7, pointsize = 8,
#     bg = "white"   
# )
# a
# dev.off()
# 
# pdf("relato1.pdf",
#     width = 7, height = 7, pointsize = 8,
#     bg = "white"   
# )
# b
# dev.off()
# ##########
# # Unconstrained Ordination
# #####
# 
# #Normalization 
# # Scales reads 
# # 1) taking proportions,
# # 2) multiplying by a given library size of n
# # 3) rounding down
# scale_reads <- function(physeq, n) {
#   physeq.scale <-
#     transform_sample_counts(physeq, function(x) {
#       (n * x/sum(x))
#     })
#   otu_table(physeq.scale) <- floor(otu_table(physeq.scale))
#   physeq.scale <- prune_taxa(taxa_sums(physeq.scale) > 0, physeq.scale)
#   return(physeq.scale)
# }
# 
# #PCoA
# # use the scale_reads() function in miseqR.R to scale to the smallest library size, which is the default
# # If you want to scale to another depth, you can do so by setting the “n” argument
# #inc_scale <- inc %>%
# #  scale_reads(round = "round") 
# inc_scale <- scale_reads(inc_treatment, n = 6000)
# 
# # Fix day levels in sample_data
# sample_data(inc_scale)$day <- factor(
#   sample_data(inc_scale)$day,
#   levels = c("0", "7", "14", "21", "35", "49", "97")
# )
# 
# # Ordinate
# inc_pcoa <- ordinate(
#   physeq = inc_scale, 
#   method = "PCoA", 
#   distance = "bray"
# )
# 
# # Plot 
# c <- plot_ordination(
#   physeq = inc_scale,
#   ordination = inc_pcoa,
#   color = "day",
#   shape = "treatment",
#   title = "PCoA of Incubation Bacterial Communities"
# ) +
#   scale_color_manual(values = phylum_colors) +
#   geom_point(aes(color = day), alpha = 0.7, size = 4) +
#   geom_point(colour = "grey90", size = 1.5) +
#   theme_dark()
# pdf("PCoA.pdf",
#     width = 7, height = 7, pointsize = 8,
#     bg = "white"   
# )
# c
# dev.off()
# 
# 
# 
# 
# 
# ##########
# # Stats
# # adonis
# df = as(sample_data(inc_scale), "data.frame")
# d = distance(inc_scale, "bray")
# incadonis = adonis(d ~ treatment + day, df)
# incadonis
# # I'm pretty sure the order you feed the categories
# incadonisreverse = (adonis(d ~ day + treatment, df))
# 
